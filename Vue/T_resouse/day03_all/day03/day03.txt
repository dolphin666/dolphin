Vue组件中计算属性和监听属性
组件间通信

（基本语法+组件间通信+router+http）

一、Vue中常用属性
	1、计算属性
		①创建一个计算属性
		new Vue({
			computed:{
				getNowCount:function(){
					return **
				}
			}
		})
		②调用计算属性
		<any>{{getNowCount}}</any>
		③计算属性与普通的方法的区别
			计算属性是有依赖缓存的，如果依赖的数据没有发生变化,即使调用了计算属性，也不会执行方法
			而普通的方法就不同了，只要是调用，肯定会执行

	2、监听属性
		如果希望在用户进行表单操作时候，可以设置一个监听属性
		①在表单元素中指定v-model
		<input type='text' v-model="myValue"/>
		②在input所属的组件中 指定一个watch属性
		Vue.component('',{
			watch:{
				myValue:function(){
					//当数据中的myValue发生变化时，将会自动的执行该方法
				}
			}
		})

二、Vue中组件间通信
	一个基于Vue的项目，有可能会很多的组件，组件之间难免需要进行数据的传递，比如父组件 传数据 给子组件；子组件传数据给父组件等，需要用到组件之间的通信处理方式
	

	1、props down
		通过属性传值
		①配置子组件的props
			Vue.component('son',{
			 props:['userName']
			})
		②父组件中调用子组件的时候，通过属性把值传递过去
			Vue.component('father',{
				data:function(){
					return {
						uName:'zhangsan'
						}
				}
				template:'<son :userName='uName'></son>'
			})

		练习：实现一个登陆
			创建的组件有3个：my-button/my-input/my-login

	2、events up
			事件的绑定
			事件的触发
	
		通过事件方式去传值的基本步骤：
			①在父组件中 定义一个带有参数的方法
				Vue.component('father',{
					methods:{
						rcvMsg:function(msg){
							//msg就是希望接收到的数据
						}
					}
				})
			②在父组件中 调用子组件的时候 ，绑定一个自定义事件处理函数
					Vue.component('father',{
					methods:{
						rcvMsg:function(msg){
							//msg就是希望接收到的数据
						}
					}，
					template:'<son @customEvent="rcvMsg"></son>'
				})
			③在子组件中，触发对应的事件
				Vue.component('son',{
					//触发事件
					//this.$emit('customEvent','发送的数据');
				})
		练习：
			创建一个新的文件demo06_lianxi.html
			main-component：是由header-component和一个列表构成的;
			header-component ：是由一个按钮构成的
			要求：
			在header-component中有一个数据:isUserLogin（布尔类型的数据）
			在点击按钮时，会修改数据为相反的状态
			main-component希望能够根据header-component中的isUserLogin的真假来决定列表是否要显示

	3、ref
		ref(reference)可以给一个组件指定一个引用的名称，父组件可以根据该引用的名称得到它的实例对象，进而进行操作。
		基本步骤：
			①在父组件中调用子组件时 指定ref属性
				Vue.component('father',{
					template:'<son ref="myRef"></son>'
				})
			②根据应用的名称得到子组件的实例
				this.$refs.myRef.属性/方法
	
	4、$parent
		 可以直接在子组件中，通过this.$parent得到父组件的实例对象，从而进行具体的操作
		$refs和$parent可以直接打通父子组件的通信，但是提高了耦合度，对于组件本身的封装并不是一个好事。
		建议使用props down,events up

	5、兄弟组件通信
		三个步骤：
			①创建
			 var bus = new Vue();
			②在需要接受数据的地方，绑定事件
			   //通过bus给绑定一个事件处理函数
        bus.$on('toXiongEr',function (msg) {
          console.log('熊二收到的数据是'+msg);
        });
			③在需要发送数据的地方，触发事件
			   //触发事件并传值
          bus.$emit('toXiongEr','光头强又来偷木头了');
        


	综合练习：
	demo09_lianxi.html
		需要2个组件类: chat-room, my-input
		my-input：label+input+button
		chat-room: ul+my-input+my-input

		功能：在点击my-input中的button时，将数据发送给chat-room,chat-room接受数据并显示在无序列表中

	props down ,events up 